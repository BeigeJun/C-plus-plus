#pragma once
#include<iostream>
#include<cstring> 
#include"LinkedList.h"
using namespace std;
class DEF : public LinkedList {
public:
	LinkedList* Create();
	void Destroy(LinkedList* _ptList);
	Node* GetNode();
	Node2* GetNode2();
	Node* Read(LinkedList* _ptList);
	void Traversal(LinkedList* _ptList);
	Node* AppendFromHead(LinkedList* _ptList);
	Node* DeleteFromHead(LinkedList* _ptList);
	Node* DeleteFromHead2(Node* base);
	Node2* AppendFromHead2(Node* base);
	Node* DeleteFromTail(LinkedList* _ptList);
	void DeleteAll2(Node* base);
	void DeleteAll(LinkedList* _ptList);
	Node* Delete(LinkedList* _ptList);
	Node* Delete2(LinkedList* _ptList);
	Node* Modify(LinkedList* _ptList);
	Node* Modify2(LinkedList* _ptList);
	int menu();
};
LinkedList* DEF::Create()
{
	LinkedList* _ptList = new LinkedList;
	_ptList->m_pHead = _ptList->m_pTail;
	_ptList->m_pTail = _ptList->m_pHead;
	_ptList->m_pCurrent = NULL;
	_ptList->m_uCount = 0;
	return _ptList;
}
void DEF::Destroy(LinkedList* _ptList)
{
	delete(_ptList);
}
Node* DEF::GetNode()
{
	Node* pNode = new Node;
	pNode->m_pNext = pNode;
	pNode->m_Previous = pNode;
	cout << "이름: ";
	cin >> pNode->name;
	cout << "나이: ";
	cin >> pNode->m_iObject;
	cout << "주소: ";
	cin >> pNode->adress;
	AppendFromHead2(pNode);
	return pNode;
}
Node2* DEF::GetNode2()
{
	Node2* pNode = new Node2;
	pNode->m_pNext = pNode;
	pNode->m_Previous = pNode;
	cout << "약 이름: ";
	cin >> pNode->name;
	return pNode;
}
Node* DEF::Read(LinkedList* _ptList)
{
	char a[20];
	cout << "이름을 입력하시오: ";
	cin >> a;
	Node* pointer = new Node;
	pointer = _ptList->m_pHead;
	for (int i = 0; i != _ptList->m_uCount; i++)
	{
		if (strcmp(pointer->name, a) == 0)
		{
			cout << "나이: " << pointer->m_iObject << " 주소: " << pointer->adress << endl;
			cout << "약 :";
			Node2* pointer2 = pointer->medicine_head;
			for (int i = 0; i != pointer->medicine_num; i++)
			{
				cout << pointer2->name << " ";
				pointer2 = pointer2->m_pNext;
			}
			cout << endl;
			pointer2 = NULL;
			pointer = NULL;
			free(pointer);
			free(pointer2);
			return 0;
		}
		pointer = pointer->m_pNext;
	}
	cout << a << " 고객이 없습니다." << endl;
	pointer = NULL;
	free(pointer);
	return 0;
}
void DEF::Traversal(LinkedList* _ptList)
{

	_ptList->m_pCurrent = _ptList->m_pHead;


	for (int i = 0; i != _ptList->m_uCount; i++) {

		cout << _ptList->m_pCurrent->name << " ";
		_ptList->m_pCurrent = _ptList->m_pCurrent->m_pNext;
	}
	cout << endl;
}
Node* DEF::AppendFromHead(LinkedList* _ptList)
{
	_ptList->m_pCurrent = GetNode();

	if (_ptList->m_pHead) {
		_ptList->m_pCurrent->m_pNext = _ptList->m_pHead;
		_ptList->m_pHead->m_Previous = _ptList->m_pCurrent;
	}
	else
		_ptList->m_pTail = _ptList->m_pCurrent;

	_ptList->m_pHead = _ptList->m_pCurrent;
	(_ptList->m_uCount)++;
	return 0;
}
Node2* DEF::AppendFromHead2(Node* base)
{
	int num = 0;
	cout << "약의 갯수를 입력하시오:";
	cin >> num;
	for (int i = 0; i != num; i++)
	{
		Node2* pointer = GetNode2();
		Node2* pre_pointer;
		if (base->medicine_num == 0)
		{
			base->medicine_head = pointer;
			(base->medicine_num)++;
		}
		else
		{
			pre_pointer = base->medicine_head;
			for (int i = 1; i != base->medicine_num; i++)
			{
				pre_pointer = pre_pointer->m_pNext;
			}
			pre_pointer->m_pNext = pointer;
			pointer->m_Previous = pre_pointer;
			base->medicine_num = base->medicine_num + 1;
		}
	}
	return 0;
}
Node* DEF::DeleteFromHead(LinkedList* _ptList)
{
	if (_ptList->m_uCount == 1)
	{
		Node* pointer;
		pointer = _ptList->m_pHead;
		free(pointer);
		_ptList->m_pHead = NULL;
		_ptList->m_pTail = NULL;
		_ptList->m_pCurrent = NULL;
		_ptList->m_uCount = 0;
	}
	else {
		Node* pointer;
		pointer = _ptList->m_pHead;
		pointer = pointer->m_pNext;
		pointer->m_Previous = pointer;
		pointer = _ptList->m_pHead;
		_ptList->m_pHead = pointer->m_pNext;
		(_ptList->m_uCount)--;
		free(pointer);
	}
	return 0;
}
Node* DEF::DeleteFromHead2(Node* base)
{
	if (base->medicine_num == 1)
	{
		Node2* pointer;
		pointer = base->medicine_head;
		free(pointer);
		base->medicine_head = NULL;
		base->medicine_num = 0;
	}
	else {
		Node2* pointer;
		pointer = base->medicine_head;
		pointer = pointer->m_pNext;
		pointer->m_Previous = pointer;
		pointer = base->medicine_head;
		base->medicine_head = pointer->m_pNext;
		(base->medicine_num)--;
		free(pointer);
	}
	return 0;
}
Node* DEF::DeleteFromTail(LinkedList* _ptList)
{
	if (_ptList->m_uCount == 1)
	{
		Node* pointer;
		pointer = _ptList->m_pHead;
		free(pointer);
		_ptList->m_pHead = NULL;
		_ptList->m_pTail = NULL;
		_ptList->m_pCurrent = NULL;
		_ptList->m_uCount = 0;
	}
	else {
		Node* pointer;
		pointer = _ptList->m_pTail;
		pointer = pointer->m_Previous;
		pointer->m_pNext = pointer;
		pointer = _ptList->m_pTail;
		_ptList->m_pTail = pointer->m_Previous;
		free(pointer);
		(_ptList->m_uCount)--;
	}
	return 0;
}
void DEF::DeleteAll2(Node* base)
{
	Node2* pointer = base->medicine_head;
	for (int i = base->medicine_num; i > 1; i--)
	{
		pointer = pointer->m_pNext;
		free(pointer->m_Previous);
	}
	free(pointer);
	base->medicine_head = NULL;
	base->medicine_num = 0;
}
void DEF::DeleteAll(LinkedList* _ptList)
{
	Node* pointer = _ptList->m_pHead;
	for (int i = _ptList->m_uCount; i > 1; i--)
	{
		pointer = pointer->m_pNext;
		DeleteAll2(pointer->m_Previous);
		free(pointer->m_Previous);
	}
	free(pointer);
	_ptList->m_pCurrent = NULL;
	_ptList->m_pHead = NULL;
	_ptList->m_pTail = NULL;
	_ptList->m_uCount = 0;
}
Node* DEF::Delete(LinkedList* _ptList)
{
	char name[20];
	int count = 1;
	cout << "삭제할 고객님의 이름을 입력하시오";
	cin >> name;
	Node* SomeThing;
	Node* SomeThingBefore;
	Node* SomeThingNext;
	if (_ptList->m_uCount == 0)
	{
		cout << "저장된 정보가 없습니다." << endl;
	}
	else {
		SomeThing = _ptList->m_pHead;
		for (int i = 0; i != _ptList->m_uCount; i++)
		{
			if (strcmp(SomeThing->name, name) == 0)
			{
				if (_ptList->m_uCount == count) {
					DeleteFromTail(_ptList);
					return 0;
				}
				else if (count == 1) {
					DeleteFromHead(_ptList);
					return 0;
				}
				else {
					SomeThingBefore = SomeThing->m_Previous;
					SomeThingNext = SomeThing->m_pNext;
					SomeThingBefore->m_pNext = SomeThingNext;
					SomeThingNext->m_Previous = SomeThingBefore;
					DeleteAll2(SomeThing);
					SomeThingBefore = NULL;
					SomeThingNext = NULL;
					free(SomeThingBefore);
					free(SomeThingNext);
					free(SomeThing);
					(_ptList->m_uCount)--;
					return 0;
				}
			}
			SomeThing = SomeThing->m_pNext;
			count++;
		}
		cout << "해당 고객이 저장되어있지 않습니다.";
		return 0;
	}
}
Node* DEF::Delete2(LinkedList* _ptList)
{
	char name1[20];
	int count1 = 1;
	cout << "이름을 입력하시오 :";
	cin >> name1;
	Node* pointer = new Node;
	pointer = _ptList->m_pHead;
	if (_ptList->m_uCount == 0)
	{
		cout << name1 << " 고객이 없습니다." << endl;
		pointer = NULL;
		free(pointer);
		return 0;
	}
	for (int i = 0; i != _ptList->m_uCount; i++)
	{
		if (strcmp(pointer->name, name1) == 0)
		{
			break;
		}
		pointer = pointer->m_pNext;
		count1++;
	}
	if (count1 == _ptList->m_uCount)
	{
		cout << name1 << " 고객이 없습니다." << endl;
		pointer = NULL;
		free(pointer);
		return 0;
	}

	char name[20];
	int count = 1;
	cout << "약의 이름을 입력하시오 :";
	cin >> name;
	Node2* SomeThing;
	Node2* SomeThingBefore;
	Node2* SomeThingNext;
	if (pointer->medicine_num == 0)
	{
		cout << "저장된 정보가 없습니다." << endl;
	}
	else {
		SomeThing = pointer->medicine_head;
		for (int i = 0; i != pointer->medicine_num; i++)
		{
			if (strcmp(SomeThing->name, name) == 0)
			{
				if (pointer->medicine_num == count) {
					SomeThing = SomeThing->m_Previous;
					free(SomeThing->m_pNext);
					(pointer->medicine_num)--;
					return 0;
				}
				else if (count == 1) {
					DeleteFromHead2(pointer);
					return 0;
				}
				else {
					SomeThingBefore = SomeThing->m_Previous;
					SomeThingNext = SomeThing->m_pNext;
					SomeThingBefore->m_pNext = SomeThingNext;
					SomeThingNext->m_Previous = SomeThingBefore;
					SomeThingBefore = NULL;
					SomeThingNext = NULL;
					free(SomeThingBefore);
					free(SomeThingNext);
					free(SomeThing);
					(pointer->medicine_num)--;
					return 0;
				}
			}
			SomeThing = SomeThing->m_pNext;
			count++;
		}
		cout << "해당 약이 저장되어있지 않습니다.";
		return 0;
	}
}
Node* DEF::Modify(LinkedList* _ptList)
{

	char a[20];
	cout << "이름을 입력하시오: ";
	cin >> a;
	Node* pointer = new Node;
	pointer = _ptList->m_pHead;
	for (int i = 0; i != _ptList->m_uCount; i++)
	{
		if (strcmp(pointer->name, a) == 0)
		{
			cout << "변경전:" << endl;
			cout << "나이: " << pointer->m_iObject << " 주소: " << pointer->adress << endl;
			cout << "변경할 내용을 입력하시오:" << endl;
			cout << "이름: ";
			cin >> pointer->name;
			cout << "나이: ";
			cin >> pointer->m_iObject;
			cout << "주소: ";
			cin >> pointer->adress;
			pointer = NULL;
			free(pointer);
			return 0;
		}
		pointer = pointer->m_pNext;
	}
	cout << a << " 고객이 없습니다." << endl;
	pointer = NULL;
	free(pointer);
	return 0;
}
Node* DEF::Modify2(LinkedList* _ptList)
{

	char a[20];
	cout << "이름을 입력하시오: ";
	cin >> a;
	Node* pointer = new Node;
	pointer = _ptList->m_pHead;
	for (int i = 0; i != _ptList->m_uCount; i++)
	{
		if (strcmp(pointer->name, a) == 0)
		{
			Node2* M_pointer = pointer->medicine_head;
			int a;
			cout << "변경전:" << endl;
			for (int i = 0; i < pointer->medicine_num; i++)
			{
				cout << M_pointer->name << " ";
				M_pointer = M_pointer->m_pNext;
			}
			cout << endl;
			M_pointer = NULL;
			free(M_pointer);
			AppendFromHead2(pointer);

			pointer = NULL;
			free(pointer);
			return 0;
		}
		pointer = pointer->m_pNext;
	}
	cout << a << " 고객이 없습니다." << endl;
	pointer = NULL;
	free(pointer);
	return 0;
}
int DEF::menu()
{
	int number;
	int word = 0;
	

	LinkedList* master = Create();
	while (1)
	{
		cout << endl;
		cout << " ------------기능을 선택해 주십쇼--------------" << endl;
		cout << "|1.새 손님 정보 업로드                         |" << endl;
		cout << "|2.손님 정보 보기                              |" << endl;
		cout << "|3.손님 정보 변경(이름 나이 주소)              |" << endl;
		cout << "|4.손님 약 정보 추가                           |" << endl;
		cout << "|5.손님 약 정보 부분 삭제                      |" << endl;
		cout << "|6.모든 손님 정보 지우기                       |" << endl;
		cout << "|7.지정 손님 정보 지우기                       |" << endl;
		cout << "|8.모든 손님 이름 출력                         |" << endl;
		cout << "|9.모든 정보 지우기(끝내기)                    |" << endl;
		cout << " ----------------------------------------------" << endl;
		cout << "입력 : ";

		char tmp[100];
		rewind(stdin);
		gets_s(tmp);
		for (int f = 0; tmp[f] != '\0'; f++)
		{
			if (tmp[f] >= '0' && tmp[f] <= '9')
			{
			}
			else
			{
				word = word + 1;
				break;
			}
		}
		if (word != 0)
		{
			system("cls");
			word = 0;
			cout << "문자가 포함되어있음 다시 입력하시오" << endl;
			continue;
		}
		number = atoi(tmp);
		if (number > 2147483647 && number < 0)
		{
			cout << "2147483647이하의 양의 정수를 입력해주십시오" << endl;
			continue;
		}
		system("cls");

		if (number == 1)
		{
			AppendFromHead(master);
		}
		else if (number == 2)
		{
			Read(master);
		}
		else if (number == 3)
		{
			Modify(master);
		}
		else if (number == 4)
		{
			Modify2(master);
		}
		else if (number == 5)
		{
			Delete2(master);
		}
		else if (number == 6)
		{
			DeleteAll(master);
		}
		else if (number == 7)
		{
			Delete(master);
		}
		else if (number == 8)
		{
			Traversal(master);
		}
		else if (number == 9)
		{
			DeleteAll(master);
			Destroy(master);
			cout << "종료합니다.";
			return 0;
		}
	}
}
