#include <algorithm>
#include <iostream>
#include <string>
using namespace std;

class Playfair {
	char mTable[25];
	string mPair;
	string mKey;
	string Passward = "";
	char Pair1;
	char Pair2;
public:
	Playfair(string mKey, string mPair);
	void makeTable();
	void showTable();
	string makeEncryption(string mEncryption);

};

Playfair::Playfair(string mKey, string mPair) {
	this->mKey = mKey;
	this->mPair = mPair;
}

void Playfair::makeTable() {
	// mKey와 mPair를 이용하여 mTable을 만드세요. (5 X 5 로 표현하시오)
	cout << mKey << endl;
	for (int i = 0; i < mKey.length(); i++) {  // 대문자로 변환
		mKey[i] = toupper(mKey[i]);
	}
	cout << mKey << endl;

	mKey += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	cout << mKey << endl;
	for (int i = 0; i < mPair.length(); i++) {  // 대문자로 변환
		mPair[i] = toupper(mPair[i]);
	}
	cout << mPair << endl;
	Pair1 = mPair[0];
	Pair2 = mPair[2];
	cout << Pair1 << endl;
	cout << Pair2 << endl;

	for (int a = 0; a < mKey.length(); a++)
	{
		if (mKey[a] == Pair1)
		{
			mKey[a] = Pair2;
		}
		else
		{
		}
	}
	cout << "q를 z로 바꾸기" << mKey << endl;
	int check_used;
	int adress = 0;
	for (int a = 0; a < mKey.length(); a++) {
		check_used = 0;
		for (int i = 0; i != 25; i++) {
			if (mKey[a] == mTable[i]) {
				check_used++;
			}
		}
		if (check_used == 0) {
			mTable[adress] = mKey[a];
			adress++;
		}
	}
	mTable[adress] = NULL;
	cout << mTable << endl << endl;


}

void Playfair::showTable() {
	// mTable에 있는 값들을 5 X 5 로 화면에 출력하시오.
	int count = 0;
	for (int i = 0; i < 5; i++) {
		for (int i = 0; i < 5; i++, count++) {
			cout << mTable[count] << " ";
		}
		cout << endl;
	}
}

string Playfair::makeEncryption(string mEncryption) {
	cout << mEncryption << endl;
	int i = 0;
	int howLong, isthatodd;
	for (i = 0; i < mEncryption.length(); i++) {  // 대문자로 변환
		mEncryption[i] = toupper(mEncryption[i]);
	}
	cout << "대문자로 전환 :" << mEncryption << endl;

	for (int a = 0; a <= mEncryption.length(); a++)
	{
		if (mEncryption[a] != ' ')
		{
			cout << mEncryption[a];
		}
		else
		{
			mEncryption.erase(a, 1);
		}
	}
	cout << mEncryption << endl;

	howLong = mEncryption.length();
	cout << howLong << endl;
	isthatodd = howLong % 2;

	if (isthatodd == 1) {
		cout << "홀수입니다." << endl;     //마지막 자리에 X 붙이기
		mEncryption += "X";
		cout << mEncryption << endl;
	}
	else {
		cout << "짝수입니다." << endl;
	}


	for (int j = 0; j < mEncryption.length(); j = j + 2)
	{
		if (mEncryption[j] == mEncryption[j + 1])
			mEncryption.replace(j+1,1,"X");
	}
	cout << "x치환 후 : ";

	for (int j = 0; j < mEncryption.length(); j++) {
		cout << mEncryption[j];
		if (j % 2 != 0)
			cout << "  ";
	}
	cout << endl;
	
	string First_Word;
	string Last_Word;
	int Faddres, Laddres;
	int z,q;
	for (int s = 0; s < mEncryption.length(); s = s + 2)
	{
		First_Word = mEncryption[s];
		Last_Word = mEncryption[s + 1];
		int a = mEncryption[s];
		int b = mEncryption[s + 1];
		
		cout << "첫단어:" << First_Word << "  마지막단어 :" << Last_Word << endl ;
		for (z = 0; z < 25; z++)
		{
			int c = mTable[z];
			if (mTable[z] != mEncryption[s])
			{
			}
			else
			{
				Faddres = z;
			}
		}
		for (q = 0; q < 25; q++)
		{
			if (mTable[q] != mEncryption[s + 1])
			{
				
			}
			else
			{
				Laddres = q;
			}
		}
		cout << "첫주소:" << Faddres << "  마지막 주소 :" << Laddres << endl << endl;
		int F_Line, L_Line;
		if (Faddres >= 0 && Faddres <= 4)
		{
			F_Line = 1;
		}
		else if (Faddres >= 5 && Faddres <= 9)
		{
			F_Line = 2;
		}
		else if (Faddres >= 10 && Faddres <= 14)
		{
			F_Line = 3;
		}
		else if (Faddres >= 15 && Faddres <= 19)
		{
			F_Line = 4;
		}
		else if (Faddres >= 20 && Faddres <= 24)
		{
			F_Line = 5;
		}
		if (Laddres >= 0 && Laddres <= 4)
		{
			L_Line = 1;
		}
		else if (Laddres >= 5 && Laddres <= 9)
		{
			L_Line = 2;
		}
		else if (Laddres >= 10 && Laddres <= 14)
		{
			L_Line = 3;
		}
		else if (Laddres >= 15 && Laddres <= 19)
		{
			L_Line = 4;
		}
		else if (Laddres >= 20 && Laddres <= 24)
		{
			L_Line = 5;
		}
		cout << "라인:" << F_Line << "  라인 :" << L_Line << endl << endl;
		int True,True1;
		True = (Faddres + 1) % 5;
		True1 = (Laddres + 1) % 5;
		cout << True << True1 << endl;
		
		if (L_Line == F_Line)
		{
			if (True == 0)
			{
				Passward += mTable[Faddres - 4];
			}

			else if (True != 0)
			{
				Passward += mTable[Faddres + 1];
			}
			if(True1 == 0)
			{
				Passward += mTable[Laddres - 4];
			}
			else if(True1 !=0 )
			{
				Passward += mTable[Laddres + 1];
			}
		}


		else if (Faddres % 5 == Laddres % 5) {
			if (Faddres >= 20 && Faddres <= 24) {
				Passward += mTable[Faddres -20];
			}
			else {
				Passward += mTable[Faddres + 5];
			}
			if (Laddres >= 20 && Laddres <= 24) {
				Passward += mTable[Laddres - 20];
			}
			else {
				Passward += mTable[Laddres + 5];
			}


		}
		else {
			int gap;
			if (F_Line > L_Line) {
				gap = F_Line - L_Line;
				cout << Laddres + 5 * gap << endl;
				Passward += mTable[Laddres + 5 * gap];
				cout << Faddres - 5 * gap << endl;
				Passward += mTable[Faddres - 5 * gap];
			}
			else {
				gap = L_Line - F_Line;
				cout << Laddres - 5 * gap << endl;
				Passward += mTable[Laddres - 5 * gap];
				cout << Faddres + 5 * gap << endl;
				Passward += mTable[Faddres + 5 * gap];
			}

		}
		cout << Passward << endl;
	}
	


	return mEncryption;
}
	


int main() {
	Playfair pfair("assasinator", "q/z");
	pfair.makeTable();
	pfair.showTable();
	pfair.makeEncryption("hello my name is jjun");
}
